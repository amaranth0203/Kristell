package com.mycompany.kristell.DAO;

import com.mycompany.kristell.DAO.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TRANSACTION".
 */
public class Transaction {

    private Long id;
    private Double Amount;
    private java.util.Date OccurredTime;
    private String Comments;
    private Long CardId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TransactionDao myDao;

    private Card card;
    private Long card__resolvedKey;


    public Transaction() {
    }

    public Transaction(Long id) {
        this.id = id;
    }

    public Transaction(Long id, Double Amount, java.util.Date OccurredTime, String Comments, Long CardId) {
        this.id = id;
        this.Amount = Amount;
        this.OccurredTime = OccurredTime;
        this.Comments = Comments;
        this.CardId = CardId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransactionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getAmount() {
        return Amount;
    }

    public void setAmount(Double Amount) {
        this.Amount = Amount;
    }

    public java.util.Date getOccurredTime() {
        return OccurredTime;
    }

    public void setOccurredTime(java.util.Date OccurredTime) {
        this.OccurredTime = OccurredTime;
    }

    public String getComments() {
        return Comments;
    }

    public void setComments(String Comments) {
        this.Comments = Comments;
    }

    public Long getCardId() {
        return CardId;
    }

    public void setCardId(Long CardId) {
        this.CardId = CardId;
    }

    /** To-one relationship, resolved on first access. */
    public Card getCard() {
        Long __key = this.CardId;
        if (card__resolvedKey == null || !card__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CardDao targetDao = daoSession.getCardDao();
            Card cardNew = targetDao.load(__key);
            synchronized (this) {
                card = cardNew;
            	card__resolvedKey = __key;
            }
        }
        return card;
    }

    public void setCard(Card card) {
        synchronized (this) {
            this.card = card;
            CardId = card == null ? null : card.getId();
            card__resolvedKey = CardId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
